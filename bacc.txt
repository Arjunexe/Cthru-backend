
! To kill the port if its already running somewhere
To find the PID no of the port -> netstat -ano | findstr :3000
To kill the port -> taskkill /PID 12028 /F
To see the task list -> tasklist | findstr 12028

!shortcut
close all tab -> Ctrl K W
settings -> Ctlr ,
format -> Shirft Alt F
find and terminate node process -> Get-Process node, Stop-Process -Name node -Force

!---------------------------------------

import React, { useState } from "react";
import Cropper from "react-easy-crop";
import getCroppedImg from "./cropImage"; // Utility function for cropping

function ImageCropModal({ onClose, onUpload }) {
  const [imageSrc, setImageSrc] = useState(null);
  const [crop, setCrop] = useState({ x: 0, y: 0 });
  const [zoom, setZoom] = useState(1);
  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = () => setImageSrc(reader.result);
      reader.readAsDataURL(file);
    }
  };

  const handleCropComplete = (croppedArea, croppedAreaPixels) => {
    setCroppedAreaPixels(croppedAreaPixels);
  };

  const handleUpload = async () => {
    const croppedImage = await getCroppedImg(imageSrc, croppedAreaPixels);
    onUpload(croppedImage); // Pass the cropped image to parent component
    onClose();
  };

  return (
    <div className="modal">
      <input type="file" onChange={handleFileChange} />
      {imageSrc && (
        <div className="crop-container">
          <Cropper
            image={imageSrc}
            crop={crop}
            zoom={zoom}
            aspect={1} // Adjust ratio if needed
            onCropChange={setCrop}
            onCropComplete={handleCropComplete}
            onZoomChange={setZoom}
          />
        </div>
      )}
      <button onClick={handleUpload}>Upload</button>
      <button onClick={onClose}>Cancel</button>
    </div>
  );
}

export default ImageCropModal;

!---------------------------------------

export default async function getCroppedImg(imageSrc, crop) {
  const image = await createImage(imageSrc);
  const canvas = document.createElement("canvas");
  const ctx = canvas.getContext("2d");

  canvas.width = crop.width;
  canvas.height = crop.height;

  ctx.drawImage(
    image,
    crop.x,
    crop.y,
    crop.width,
    crop.height,
    0,
    0,
    canvas.width,
    canvas.height
  );

  return new Promise((resolve) => {
    canvas.toBlob((blob) => {
      resolve(blob);
    }, "image/jpeg");
  });
}

function createImage(url) {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.onload = () => resolve(img);
    img.onerror = (error) => reject(error);
    img.src = url;
  });
}
